{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","rows","setRows","totalResources","setTotalResources","resources","family","cpu","memory","getAvailableResources","resource","find","f","updateField","row","field","value","prevRows","index","indexOf","splice","concat","getTotalNumOfInstances","numOfTenants","numOfDesiredPods","getCpuPerInstances","cpuRequest","getMemoryPerInstances","memoryRequest","getTotalResources","totalCpus","totalMemories","getTotalNodesNeeded","availableResources","useEffect","Container","maxWidth","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","Button","variant","color","onClick","newRow","id","Date","getTime","appName","addRow","TableBody","map","scope","TextField","type","defaultValue","onChange","e","target","removeRow","TableFooter","r","Card","CardContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.227c0551.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\n\nfunction App() {\n  const [rows, setRows] = useState([]);\n  const [totalResources, setTotalResources] = useState(0);\n  const daemonsetcpu = 200;\n  const resources = [\n    { family: \"b2ms_d2as\", cpu: 1900, memory: 7961 },\n    {\n      family: \"b4ms_d4as\",\n      cpu: 3860,\n      memory: 12601,\n    },\n    { family: \"b8ms_d8as\", cpu: 7820, memory: 27721 },\n  ];\n  const getAvailableResources = (family) => {\n    const resource = resources.find((f) => f.family === family);\n    return resource.cpu + resource.memory - daemonsetcpu;\n  };\n  const addRow = () => {\n    const newRow = {\n      id: new Date().getTime(),\n      cpuRequest: 0,\n      appName: \"\",\n      memoryRequest: 0,\n      numOfTenants: 1,\n      numOfDesiredPods: 1,\n    };\n    setRows((prevRows) => {\n      return [].concat(prevRows).concat(newRow);\n    });\n  };\n  const updateField = (row, field, value) => {\n    row[field] = value;\n    setRows((prevRows) => {\n      const index = prevRows.indexOf(row);\n      if (index !== -1) {\n        prevRows.splice(index, 1);\n      }\n      return [].concat(prevRows).concat(row);\n    });\n  };\n  const getTotalNumOfInstances = (row) => {\n    return row ? +row.numOfTenants * +row.numOfDesiredPods : -1;\n  };\n  const getCpuPerInstances = (row) => {\n    return row ? +row.cpuRequest * getTotalNumOfInstances(row) : -1;\n  };\n  const getMemoryPerInstances = (row) => {\n    return row ? +row.memoryRequest * getTotalNumOfInstances(row) : -1;\n  };\n  const removeRow = (row) => {\n    setRows((prevRows) => {\n      const index = prevRows.indexOf(row);\n      if (index !== -1) {\n        prevRows.splice(index, 1);\n      }\n      return [].concat(prevRows);\n    });\n  };\n  const getTotalResources = () => {\n    let totalCpus = 0;\n    let totalMemories = 0;\n    for (const row of rows) {\n      totalCpus += getCpuPerInstances(row);\n      totalMemories += getMemoryPerInstances(row);\n    }\n    return totalCpus + totalMemories;\n  };\n  const getTotalNodesNeeded = (family) => {\n    const availableResources = getAvailableResources(family);\n    return totalResources / availableResources;\n  };\n  useEffect(() => {\n    setTotalResources(getTotalResources(rows));\n  }, [getTotalResources, rows, setTotalResources]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>App Name</TableCell>\n              <TableCell align=\"right\">CPU request</TableCell>\n              <TableCell align=\"right\">CPU * instances</TableCell>\n              <TableCell align=\"right\">Memory request</TableCell>\n              <TableCell align=\"right\">Memory * instances</TableCell>\n              <TableCell align=\"right\"># of tenants</TableCell>\n              <TableCell align=\"right\"># of desired pods</TableCell>\n              <TableCell align=\"right\">Total # of instances</TableCell>\n              <TableCell align=\"right\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    addRow();\n                  }}\n                >\n                  Add\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.id}>\n                <TableCell component=\"th\" scope=\"row\">\n                  <TextField\n                    variant=\"outlined\"\n                    type=\"text\"\n                    defaultValue={row.appName}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  <TextField\n                    variant=\"outlined\"\n                    type=\"number\"\n                    defaultValue={row.cpuRequest}\n                    onChange={(e) => {\n                      updateField(row, \"cpuRequest\", e.target.value);\n                    }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">{getCpuPerInstances(row)}</TableCell>\n                <TableCell align=\"right\">\n                  <TextField\n                    variant=\"outlined\"\n                    type=\"number\"\n                    defaultValue={row.memoryRequest}\n                    onChange={(e) => {\n                      updateField(row, \"memoryRequest\", e.target.value);\n                    }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  {getMemoryPerInstances(row)}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <TextField\n                    variant=\"outlined\"\n                    type=\"number\"\n                    defaultValue={row.numOfTenants}\n                    onChange={(e) => {\n                      updateField(row, \"numOfTenants\", e.target.value);\n                    }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  <TextField\n                    variant=\"outlined\"\n                    type=\"number\"\n                    defaultValue={row.numOfDesiredPods}\n                    onChange={(e) => {\n                      updateField(row, \"numOfDesiredPods\", e.target.value);\n                    }}\n                  />\n                </TableCell>\n                <TableCell align=\"right\">\n                  {getTotalNumOfInstances(row)}\n                </TableCell>\n                <TableCell align=\"right\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() => {\n                      removeRow(row);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n          <TableFooter>\n            <TableRow>\n              <TableCell>Total resources requested</TableCell>\n              <TableCell>{getTotalResources()}</TableCell>\n            </TableRow>\n          </TableFooter>\n        </Table>\n      </TableContainer>\n      {resources.map((r) => (\n        <Card variant=\"outlined\">\n          <CardContent>\n            <h2>{r.family}</h2>\n            <ul>\n              <li>Available resources: {getAvailableResources(r.family)}</li>\n              <li>Total nodes needed: {getTotalNodesNeeded(r.family)}</li>\n            </ul>\n          </CardContent>\n        </Card>\n      ))}\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}